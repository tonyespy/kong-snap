name: kong
version: "2.0.4"
summary: The Cloud-Native API Gateway
base: core18
description: |
  Kong is a cloud-native, fast, scalable, and distributed Microservice Abstraction Layer (also known as an API Gateway, API Middleware or in some cases Service Mesh). Made available as an open-source project in 2015, its core values are high performance and extensibility.
icon: snap/local/runtime-assets/kong-logo.png

# for system-usernames we need snapd 2.42
assumes: [snapd2.42]

# epoch 0 is for the old 0.13.1 version of the snap with cassandra
# epoch 1 is for the 1.3 version of the snap with both cassandra and postgres
# epoch 2 is for 1.3+ version of the snap with just postgres
epoch: 2

grade: stable
confinement: strict

layout:
  /etc/luarocks:
    bind: $SNAP_DATA/etc/luarocks
  /usr/local:
    bind: $SNAP/usr/local
system-usernames:
  snap_daemon: shared

environment:
  LC_ALL: C.UTF-8
  LANG: C.UTF-8

passthrough:
  hooks:
    post-refresh:
      environment:
        PGHOST: $SNAP_COMMON/sockets
        SNAPCRAFT_PRELOAD_REDIRECT_ONLY_SHM: 1
      command-chain:
        - snap/command-chain/snapcraft-runner
        - bin/snapcraft-preload
    install:
      environment:
        PGHOST: $SNAP_COMMON/sockets
        SNAPCRAFT_PRELOAD_REDIRECT_ONLY_SHM: 1
      command-chain:
        - snap/command-chain/snapcraft-runner
        - bin/snapcraft-preload

architectures:
  - build-on: armhf
  - build-on: arm64
  - build-on: amd64
  - build-on: i386

apps:
  kong-daemon:
    adapter: full
    after:
      - postgres
    command: bin/kong-daemon.sh
    command-chain:
      - bin/perl5lib-launch.sh
      - bin/kong-launch.sh
    daemon: forking
    environment:
      KONG_CONF: $SNAP_DATA/config/kong.conf
      KONG_LOGS_DIR: $SNAP_COMMON/logs
      KONG_PROXY_ACCESS_LOG: $SNAP_COMMON/logs/kong-proxy-access.log
      KONG_ADMIN_ACCESS_LOG: $SNAP_COMMON/logs/kong-admin-access.log
      KONG_PROXY_ERROR_LOG: $SNAP_COMMON/logs/kong-proxy-error.log
      KONG_ADMIN_ERROR_LOG: $SNAP_COMMON/logs/kong-admin-error.log
      KONG_ADMIN_LISTEN: "0.0.0.0:8001, 0.0.0.0:8444 ssl"
    start-timeout: 1m
    plugs:
      - network
      - network-bind
    stop-command: bin/kong-stop.sh
  kong:
    adapter: full
    command: usr/local/bin/kong
    command-chain:
      - bin/perl5lib-launch.sh
      - bin/kong-launch.sh
    environment:
      KONG_LOGS_DIR: $SNAP_COMMON/logs
    plugs:
      - network-bind
      - network
      - home
      - removable-media
  postgres:
    adapter: full
    command: usr/lib/postgresql/10/bin/postgres -D $SNAP_DATA/postgresql/10/main -c $CONFIG_ARG
    daemon: simple
    environment:
      CONFIG_ARG: config_file=$SNAP_DATA/etc/postgresql/10/main/postgresql.conf
      SNAPCRAFT_PRELOAD_REDIRECT_ONLY_SHM: 1
    command-chain:
      - bin/gosu-snap_daemon.sh
      - bin/snapcraft-preload
    plugs:
      - network
      - network-bind
  psql:
    adapter: full
    command: usr/bin/psql
    environment:
      PGHOST: $SNAP_COMMON/sockets
    command-chain:
      - bin/perl5lib-launch.sh
      # createuser should be run as the snap_daemon user, which is the user
      # who is initially created as a role with postgres
      - bin/gosu-snap_daemon.sh
    plugs:
      - network
  # same as psql app, but runs as any user, not snap_daemon
  psql-any:
    adapter: full
    command: usr/bin/psql
    environment:
      PGHOST: $SNAP_COMMON/sockets
      PSQLRC: $SNAP_USER_COMMON/.psqlrc
    command-chain:
      - bin/perl5lib-launch.sh
    plugs:
      - network
  createuser:
    adapter: full
    command: usr/bin/createuser
    environment:
      PGHOST: $SNAP_COMMON/sockets
    command-chain:
      - bin/perl5lib-launch.sh
      # createuser should be run as the snap_daemon user, which is the user
      # who is initially created as a role with postgres
      - bin/gosu-snap_daemon.sh
    plugs:
      - network
  createdb:
    adapter: full
    command: usr/bin/createdb
    environment:
      PGHOST: $SNAP_COMMON/sockets
    command-chain:
      - bin/perl5lib-launch.sh
      # createdb should be run as the snap_daemon user, which is the user
      # who is initially created as a role with postgres
      - bin/gosu-snap_daemon.sh
    plugs:
      - network

parts:
  scripts:
    source: .
    plugin: dump
    prime:
      - bin/*
      - etc/*
  kong:
    plugin: nil
    build-packages:
      - curl
    stage-packages:
      - libpcre3
      - perl
      - zlib1g-dev
    override-build: |
      # use dpkg architecture to figure out our target arch
      # note - we specifically don't use arch
      case "$(dpkg --print-architecture)" in
        amd64)
          FILE_NAME=kong-2.1.4.xenial.amd64.deb
          FILE_HASH=d2eea3fb5176d63959f16b71ee46b5a5128313529c76b72ec5bb4d614fd37b67
          ;;
        arm64)
          FILE_NAME=kong-2.1.4.xenial.arm64.deb
          FILE_HASH=c17ba1b9cf7bab29395cbce4d7773efffc4baac4701a14d37fbba5562c9278d8
          ;;
      esac
      # download the archive, failing on ssl cert problems
      curl -L https://bintray.com/kong/kong-deb/download_file?file_path=$FILE_NAME -o $FILE_NAME
      echo "$FILE_HASH $FILE_NAME" > sha256
      sha256sum -c sha256 | grep OK
      dpkg -x $FILE_NAME $SNAPCRAFT_PART_INSTALL

      mkdir $SNAPCRAFT_PART_INSTALL/config
      cp $SNAPCRAFT_PART_INSTALL/etc/kong/kong.conf.default $SNAPCRAFT_PART_INSTALL/config/kong.conf
    #prime:
    #  - usr/local/*
    prime:
       - -lib/systemd/*

  # snapcraft preload is necessary to make postgres just use a different
  # lockfile location in /dev/shm
  # NOTE: if this ever breaks in really scary ways when compiling with lots of
  # warnings, see the comment on the kong part, tldr probably some other C/C++
  # part in the build broke snapcraft-preload by running before
  # snapcraft-preload
  snapcraft-preload:
    source: https://github.com/sergiusens/snapcraft-preload.git
    plugin: cmake
    build-packages:
      - to arm64:
          - g++-multilib-arm-linux-gnueabihf
          - gcc-multilib-arm-linux-gnueabihf
      - else:
          - gcc-multilib
          - g++-multilib
    stage-packages:
      - to amd64:
          - lib32stdc++6
  gosu:
    source: https://github.com/tianon/gosu.git
    plugin: go
    go-importpath: github.com/tianon/gosu
    build-environment:
      - CGO_ENABLED: "0"
  postgres:
    plugin: nil
    override-build: |
      snapcraftctl build
      # the perl package for postgres hard-codes the bin dir as /usr/lib/postgresql
      # so we need to prepend that with /snap/postgres/current/ before it will
      # work
      sed -i -e \
        's@our $binroot = \"/usr/lib/postgresql/\"@our $binroot = \"/snap/'$SNAPCRAFT_PROJECT_NAME'/current/usr/lib/postgresql/\";@' \
        $SNAPCRAFT_PART_INSTALL/usr/share/perl5/PgCommon.pm
    stage-packages:
      - postgresql
      - postgresql-contrib
      - postgresql-client
      - perl
